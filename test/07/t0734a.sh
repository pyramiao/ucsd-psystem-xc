#!/bin/sh
#
# UCSD p-System cross compiler
# Copyright (C) 2012 Peter Miller
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# you option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>
#

TEST_SUBJECT="ucsdpsys_osmakgen vs system.charset"
. test_prelude

TAB=`awk 'BEGIN{printf("%c",9)}' /dev/null`

mkdir -p charset compiler host/terak/charset host/klebsch/charset
test $? -eq 0 || no_result

filenames="\
    charset/system.text \
    charset/system.png \
    compiler/main.text \
    host/klebsch/charset/system.text \
    host/klebsch/miscinfo.text \
    host/terak/charset/system.text \
    host/terak/charset/xyz.text \
    host/terak/miscinfo.text \
    "
touch $filenames
test $? -eq 0 || no_result

sed "s|{TAB}|$TAB|g" > ok << 'fubar'
#
# This file is generated by the ucsdpsys_osmakgen(1) command, from the
# ucsd-psystem-xc project.  The ucsd-psystem-xc project is distributed under the
# terms and conditions of the GNU GPL version 3.  As a special exception, the
# contents of this file are not subject to those terms and conditions.
#
#
# Note well:  This file is generated.  See the 'filenames =' assignment, below,
# for more information.
#

#
# The $(prefix) macro is used by ./configure to define all the other
# installation paths.
#
# If you need to change the prefix, it is best to re-run ./configure using the
# --prefix=PATH option, as this will re-write all of the files which contain the
# prefix, not just this one.
#
prefix = @prefix@
exec_prefix = @exec_prefix@

#
# The $(datadir) is where to put the data directories.
#
# The $(datadir) is for architecture-neutral files.  On a network, this would be
# shared between all machines on the network.  It can be mounted read-only.
#
# This is where shell scripts are parked.  This is where report scripts are
# parked.  This is where documents are parked.
#
# By default, the macro uses the $(prefix) macro to simplify the number of
# things you have to supply on the ./configure command line.
#
datadir = $(DESTDIR)@datadir@
datarootdir = $(DESTDIR)@datarootdir@

#
# The $(sysconfdir) is where to put the system configuration directory.
#
#
# By default, the macro uses the $(prefix) macro to simplify the number of
# things you have to supply on the ./configure command line.  It is common to
# explicitly give ./configure --sysconfdir=/etc on the command line.
sysconfdir = $(DESTDIR)@sysconfdir@

#
# This makefile builds the UCSD p-System system in three stages.
#
# The first stage is to use the ucsdpsys_compile command (from the
# ucsd-psystem-xc project) to build the executables of the system, compiler,
# assembler, linker and utilities.
#
# The first stage files are then combined, using the ucsdpsys_mkfs and
# ucsdpsys_disk commands from the ucsd-psystem-fs project, to build disk images
# suitable for use with a UCSD p-System emulator.
#
# Stage two involves using the ucsdpsys_vm emulator, from the ucsd-psystem-vm
# project, to use the disk images created by stage one to compile the sources
# once again, this time using the compiler built by stage one, in order to have
# a natively compiled system.
#
# The second stage files are then combined, using the ucsdpsys_mkfs and
# ucsdpsys_disk commands, to build a second set of disk images.  In theory the
# system is now boot-strapped and ready to use.
#
# Stage three once again uses the emulator, but this time with the disk images
# created by stage two.  The codefiles produced by stage three should be
# identical to those produced by stage two.  If they differ, you have probably
# uncovered a bug.
#

all: stage1.disks

# Only stage one is working, so far.

#
# The host is the system (often a brand name) that will eventually host the
# boot-strapped system.  This controls the choice of certain system
# alternatives.  Look in the 'host' directory for the known host types (brand
# names).  It also implies the kind of microprocessor being used.
#
# The default is 'klebsch' in reference to the ucsd-psystem-vm project (the
# emulator was written by Mario Klebsch).
#
host = klebsch

#
# The arch is the microprocessor that the boot-strapped system will eventually
# execute on.  This controls the choice of interpreter, assembler and long
# integer support to be built.
#
# Look in the 'arch' directory for the known microprocessor types.  We have yet
# to locate all of the historical source code for all known architectures, so
# the coverage may be uneven.  If you have source code to one of the missing
# pieces, it would be a most welcome contribution to this project.
#
arch := $(shell ucsdpsys_osmakgen --arch-from-host $(host))

#
# The Cross Compiler Flags
#
# The -fno-efj-nfj option tells the cross compiler not to use the EFJ and NFJ
# opcodes.  This is necessary for interpreters that do not implement these
# opcodes; Apple, for example.
#
# The -finline-math option tells the cross compiler to use the CSP math opcodes,
# rather than calling the TRANSCEN intrinsic unit.
#
XCFLAGS = --arch=$(arch) -Wno-shadow

#
# Note well: This file is generated.
#
# This variable holds the list of files from which this file was generated.  By
# changeing it, and running the 'make rebuild-makefile' command, you can
# manipulate it in various ways.
#
# 1. If you only need to rebuild the include dependencies, use the 'make
# rebuild-makefile' command.
# 2. If you need to add a source file, add it to the 'filenames' variable, and
# then rebuild the Makefile (see above).
# 3. If you want to add a new utility, the file must be named
# <utility>/main.text (plus as many include files as you like in that directory)
# for it to be recognised as a program to be compiled; then proceed as if you
# were adding a new file or files (see above).
# 4. If you need a more structural change to this file, you actually need to
# change the ucsdpsys_osmakgen command in the cross compiler ucsd-psystem-xc
# project.
#
# See the ucsdpsys_osmakgen(1) man page for more information about the directory
# structure.
#
filenames = charset/system.png charset/system.text compiler/main.text \
{TAB}{TAB}host/klebsch/charset/system.text host/klebsch/miscinfo.text \
{TAB}{TAB}host/terak/charset/system.text host/terak/charset/xyz.text \
{TAB}{TAB}host/terak/miscinfo.text

ifeq ($(wildcard host/$(host)/charset/system.text),)

host/$(host)/charset/system.charset: charset/system.text charset/system.png
{TAB}@mkdir -p host/$(host)/charset
{TAB}ucsdpsys_charset --host=$(host) --encode charset/system.text \
{TAB}{TAB}host/$(host)/charset/system.charset charset/system.png

endif

stage1/$(host)/codefiles/compiler/main.code: compiler/main.text
{TAB}@mkdir -p stage1/$(host)/codefiles/compiler
{TAB}ucsdpsys_compile $(XCFLAGS) -fignore-undefined-segment-zero -Icompiler \
{TAB}{TAB}-o stage1/$(host)/codefiles/compiler/main.code \
{TAB}{TAB}compiler/main.text
{TAB}ucsdpsys_librarian --file=stage1/$(host)/codefiles/compiler/main.code \
{TAB}{TAB}--remove-system-segments

host/klebsch/charset/system.charset: host/klebsch/charset/system.text \
{TAB}{TAB}charset/system.png
{TAB}@mkdir -p host/klebsch/charset
{TAB}ucsdpsys_charset --host=klebsch --encode \
{TAB}{TAB}host/klebsch/charset/system.text \
{TAB}{TAB}host/klebsch/charset/system.charset charset/system.png

stage1/$(host)/codefiles/host/klebsch/miscinfo.data: host/klebsch/miscinfo.text
{TAB}@mkdir -p stage1/$(host)/codefiles/host/klebsch
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/klebsch/miscinfo.text \
{TAB}{TAB}stage1/$(host)/codefiles/host/klebsch/miscinfo.data

stage2/$(host)/codefiles/host/klebsch/miscinfo.data: host/klebsch/miscinfo.text
{TAB}@mkdir -p stage2/$(host)/codefiles/host/klebsch
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/klebsch/miscinfo.text \
{TAB}{TAB}stage2/$(host)/codefiles/host/klebsch/miscinfo.data

stage3/$(host)/codefiles/host/klebsch/miscinfo.data: host/klebsch/miscinfo.text
{TAB}@mkdir -p stage3/$(host)/codefiles/host/klebsch
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/klebsch/miscinfo.text \
{TAB}{TAB}stage3/$(host)/codefiles/host/klebsch/miscinfo.data

host/terak/charset/system.charset: host/terak/charset/system.text \
{TAB}{TAB}charset/system.png
{TAB}@mkdir -p host/terak/charset
{TAB}ucsdpsys_charset --host=terak --encode host/terak/charset/system.text \
{TAB}{TAB}host/terak/charset/system.charset charset/system.png

host/terak/charset/xyz.charset: host/terak/charset/xyz.text charset/system.png
{TAB}@mkdir -p host/terak/charset
{TAB}ucsdpsys_charset --host=terak --encode host/terak/charset/xyz.text \
{TAB}{TAB}host/terak/charset/xyz.charset charset/system.png

stage1/$(host)/codefiles/host/terak/miscinfo.data: host/terak/miscinfo.text
{TAB}@mkdir -p stage1/$(host)/codefiles/host/terak
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/terak/miscinfo.text \
{TAB}{TAB}stage1/$(host)/codefiles/host/terak/miscinfo.data

stage2/$(host)/codefiles/host/terak/miscinfo.data: host/terak/miscinfo.text
{TAB}@mkdir -p stage2/$(host)/codefiles/host/terak
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/terak/miscinfo.text \
{TAB}{TAB}stage2/$(host)/codefiles/host/terak/miscinfo.data

stage3/$(host)/codefiles/host/terak/miscinfo.data: host/terak/miscinfo.text
{TAB}@mkdir -p stage3/$(host)/codefiles/host/terak
{TAB}ucsdpsys_setup --arch=$(arch) --encode host/terak/miscinfo.text \
{TAB}{TAB}stage3/$(host)/codefiles/host/terak/miscinfo.data

all: host/$(host)/charset/system.charset host/klebsch/charset/system.charset \
{TAB}{TAB}host/terak/charset/system.charset host/terak/charset/xyz.charset

stage1.disks: stage1/$(host)/system.vol

stage2.disks: stage2/$(host)/system.vol

stage3.disks: stage3/$(host)/system.vol

stage1/$(host)/system/system.miscinfo: \
{TAB}{TAB}stage1/$(host)/codefiles/host/$(host)/miscinfo.data
{TAB}@mkdir -p stage1/$(host)/system
{TAB}cp stage1/$(host)/codefiles/host/$(host)/miscinfo.data \
{TAB}{TAB}stage1/$(host)/system/system.miscinfo

stage2/$(host)/system/system.miscinfo: \
{TAB}{TAB}stage2/$(host)/codefiles/host/$(host)/miscinfo.data
{TAB}@mkdir -p stage2/$(host)/system
{TAB}cp stage2/$(host)/codefiles/host/$(host)/miscinfo.data \
{TAB}{TAB}stage2/$(host)/system/system.miscinfo

stage3/$(host)/system/system.miscinfo: \
{TAB}{TAB}stage3/$(host)/codefiles/host/$(host)/miscinfo.data
{TAB}@mkdir -p stage3/$(host)/system
{TAB}cp stage3/$(host)/codefiles/host/$(host)/miscinfo.data \
{TAB}{TAB}stage3/$(host)/system/system.miscinfo

ifneq ($(wildcard host/$(host)/miscinfo.text),)
stage1_system_miscinfo = stage1/$(host)/system/system.miscinfo
stage2_system_miscinfo = stage2/$(host)/system/system.miscinfo
stage3_system_miscinfo = stage3/$(host)/system/system.miscinfo
else
stage1_system_miscinfo =
stage2_system_miscinfo =
stage3_system_miscinfo =
endif

ifneq ($(wildcard host/$(host)/charset/system.text),)
stage1_system_charset = host/$(host)/system/system.charset
stage2_system_charset = host/$(host)/system/system.charset
stage3_system_charset = host/$(host)/system/system.charset
else
ifneq ($(wildcard charset/system.text),)
stage1_system_charset = host/$(host)/system/system.charset
stage2_system_charset = host/$(host)/system/system.charset
stage3_system_charset = host/$(host)/system/system.charset
else
stage1_system_charset =
stage2_system_charset =
stage3_system_charset =
endif
endif

host/$(host)/system/system.charset: host/$(host)/charset/system.charset
{TAB}@mkdir -p host/$(host)/system
{TAB}cp host/$(host)/charset/system.charset \
{TAB}{TAB}host/$(host)/system/system.charset

stage1/$(host)/system/system.compiler: \
{TAB}{TAB}stage1/$(host)/codefiles/compiler/main.code
{TAB}@mkdir -p stage1/$(host)/system
{TAB}cp stage1/$(host)/codefiles/compiler/main.code \
{TAB}{TAB}stage1/$(host)/system/system.compiler

#
# The Stage One System Disk image contains the files needed to boot the UCSD
# p-System, and the files that provide the fundamental operations of the system.
# It also includes the programs necessary to build other programs and libraries.
#
# The Stage One System Disk image is also used when compiling the next stage of
# the build.
#

stage1/$(host)/system.vol: $(stage1_system_charset) $(stage1_system_miscinfo) \
{TAB}{TAB}stage1/$(host)/system/system.compiler
{TAB}@mkdir -p stage1/$(host)
{TAB}ucsdpsys_mkfs --arch=$(arch) -B256 --label=system \
{TAB}{TAB}stage1/$(host)/system.vol
{TAB}ucsdpsys_disk --file stage1/$(host)/system.vol --text --put \
{TAB}{TAB}$(stage1_system_charset) $(stage1_system_miscinfo) \
{TAB}{TAB}stage1/$(host)/system/system.compiler
{TAB}ucsdpsys_disk --file stage1/$(host)/system.vol --crunch --list \
{TAB}{TAB}--sort=name

stage2/$(host)/system/system.compiler: \
{TAB}{TAB}stage2/$(host)/codefiles/compiler/main.code
{TAB}@mkdir -p stage2/$(host)/system
{TAB}cp stage2/$(host)/codefiles/compiler/main.code \
{TAB}{TAB}stage2/$(host)/system/system.compiler

#
# The Stage Two System Disk image contains the files needed to boot the UCSD
# p-System, and the files that provide the fundamental operations of the system.
# It also includes the programs necessary to build other programs and libraries.
#
# The Stage Two System Disk image is also used when compiling the next stage of
# the build.
#

stage2/$(host)/system.vol: $(stage2_system_charset) $(stage2_system_miscinfo) \
{TAB}{TAB}stage2/$(host)/system/system.compiler
{TAB}@mkdir -p stage2/$(host)
{TAB}ucsdpsys_mkfs --arch=$(arch) -B256 --label=system \
{TAB}{TAB}stage2/$(host)/system.vol
{TAB}ucsdpsys_disk --file stage2/$(host)/system.vol --text --put \
{TAB}{TAB}$(stage2_system_charset) $(stage2_system_miscinfo) \
{TAB}{TAB}stage2/$(host)/system/system.compiler
{TAB}ucsdpsys_disk --file stage2/$(host)/system.vol --crunch --list \
{TAB}{TAB}--sort=name

stage3/$(host)/system/system.compiler: \
{TAB}{TAB}stage3/$(host)/codefiles/compiler/main.code
{TAB}@mkdir -p stage3/$(host)/system
{TAB}cp stage3/$(host)/codefiles/compiler/main.code \
{TAB}{TAB}stage3/$(host)/system/system.compiler

#
# The Stage Three System Disk image contains the files needed to boot the UCSD
# p-System, and the files that provide the fundamental operations of the system.
# It also includes the programs necessary to build other programs and libraries.
#

stage3/$(host)/system.vol: $(stage3_system_charset) $(stage3_system_miscinfo) \
{TAB}{TAB}stage3/$(host)/system/system.compiler
{TAB}@mkdir -p stage3/$(host)
{TAB}ucsdpsys_mkfs --arch=$(arch) -B256 --label=system \
{TAB}{TAB}stage3/$(host)/system.vol
{TAB}ucsdpsys_disk --file stage3/$(host)/system.vol --text --put \
{TAB}{TAB}$(stage3_system_charset) $(stage3_system_miscinfo) \
{TAB}{TAB}stage3/$(host)/system/system.compiler
{TAB}ucsdpsys_disk --file stage3/$(host)/system.vol --crunch --list \
{TAB}{TAB}--sort=name

clean: clean-files
clean-files:
{TAB}rm -f host/$(host)/charset/system.charset
{TAB}rm -f host/$(host)/system/system.charset
{TAB}rm -f host/klebsch/charset/system.charset
{TAB}rm -f host/terak/charset/system.charset host/terak/charset/xyz.charset
{TAB}rm -f stage1/$(host)/codefiles/compiler/main.code
{TAB}rm -f stage1/$(host)/codefiles/host/klebsch/miscinfo.data
{TAB}rm -f stage1/$(host)/codefiles/host/terak/miscinfo.data
{TAB}rm -f stage1/$(host)/system.vol stage1/$(host)/system/system.compiler
{TAB}rm -f stage1/$(host)/system/system.miscinfo
{TAB}rm -f stage2/$(host)/codefiles/host/klebsch/miscinfo.data
{TAB}rm -f stage2/$(host)/codefiles/host/terak/miscinfo.data
{TAB}rm -f stage2/$(host)/system.vol stage2/$(host)/system/system.compiler
{TAB}rm -f stage2/$(host)/system/system.miscinfo
{TAB}rm -f stage3/$(host)/codefiles/host/klebsch/miscinfo.data
{TAB}rm -f stage3/$(host)/codefiles/host/terak/miscinfo.data
{TAB}rm -f stage3/$(host)/system.vol stage3/$(host)/system/system.compiler
{TAB}rm -f stage3/$(host)/system/system.miscinfo

distclean: clean dist-clean-files dist-clean-dirs
dist-clean-files:
{TAB}rm -f Makefile config.log config.status
dist-clean-dirs:
{TAB}rm -rf stage1

#
# Note well:  This file is generated.  This rule can be used to rebuild it.  See
# the 'filenames =' assignment, above, for more information.
#

rebuild-makefile:
{TAB}ucsdpsys_osmakgen $(filenames)

#
# We have "make install" install both the Stage One disk images and the Stage
# One disk directories into $(datadir).
#
# We install both the directories and the disk images so that the cross compiler
# can read the $(datadir)/ucsd-psystem-os/system/system.library file when cross
# compiling programs that use units, without adding code to the cross compiler
# for groping the private parts of disk images.  It also makes it a simple task
# to remix the files when users want to make custom disk images.
#

install: stage1.install

stage1.install: stage1.disks
{TAB}mkdir -p $(datadir)/ucsd-psystem-os
{TAB}cp -r stage1/$(host)/diagnostic $(datadir)/ucsd-psystem-os/diagnostic
{TAB}cp stage1/$(host)/diagnostic.vol \
{TAB}{TAB}$(datadir)/ucsd-psystem-os/diagnostic.vol
{TAB}cp -r stage1/$(host)/system $(datadir)/ucsd-psystem-os/system
{TAB}cp stage1/$(host)/system.vol $(datadir)/ucsd-psystem-os/system.vol
{TAB}cp -r stage1/$(host)/utility $(datadir)/ucsd-psystem-os/utility
{TAB}cp stage1/$(host)/utility.vol $(datadir)/ucsd-psystem-os/utility.vol

stage2.install: stage2.disks
{TAB}mkdir -p $(datadir)/ucsd-psystem-os
{TAB}cp -r stage2/$(host)/diagnostic $(datadir)/ucsd-psystem-os/diagnostic
{TAB}cp stage2/$(host)/diagnostic.vol \
{TAB}{TAB}$(datadir)/ucsd-psystem-os/diagnostic.vol
{TAB}cp -r stage2/$(host)/system $(datadir)/ucsd-psystem-os/system
{TAB}cp stage2/$(host)/system.vol $(datadir)/ucsd-psystem-os/system.vol
{TAB}cp -r stage2/$(host)/utility $(datadir)/ucsd-psystem-os/utility
{TAB}cp stage2/$(host)/utility.vol $(datadir)/ucsd-psystem-os/utility.vol

stage3.install: stage3.disks
{TAB}mkdir -p $(datadir)/ucsd-psystem-os
{TAB}cp -r stage3/$(host)/diagnostic $(datadir)/ucsd-psystem-os/diagnostic
{TAB}cp stage3/$(host)/diagnostic.vol \
{TAB}{TAB}$(datadir)/ucsd-psystem-os/diagnostic.vol
{TAB}cp -r stage3/$(host)/system $(datadir)/ucsd-psystem-os/system
{TAB}cp stage3/$(host)/system.vol $(datadir)/ucsd-psystem-os/system.vol
{TAB}cp -r stage3/$(host)/utility $(datadir)/ucsd-psystem-os/utility
{TAB}cp stage3/$(host)/utility.vol $(datadir)/ucsd-psystem-os/utility.vol
fubar
test $? -eq 0 || no_result

ucsdpsys_osmakgen -o test.makefile $filenames
test $? -eq 0 || fail

diff -u ok test.makefile
test $? -eq 0 || fail

#
# The functionality exercised by this test worked.
# No other assertions are made.
#
pass
# vim: set ts=8 sw=4 et :
