#!/bin/sh
#
# UCSD p-System cross compiler
# Copyright (C) 2010-2012 Peter Miller
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# you option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>
#

TEST_SUBJECT="ucsdpsys_osmakgen vs assembler"
. test_prelude

cat > ok << 'fubar'
/*
 * This file is generated by the ucsdpsys_osmakgen(1) command, from the
 * ucsd-psystem-xc project.  The ucsd-psystem-xc project is distributed under
 * the terms and conditions of the GNU GPL version 3.  As a special exception,
 * the contents of this file are not subject to those terms and conditions.
 */
set mkdir;
set unlink;
if [not [defined DESTDIR]] then DESTDIR = ;
/*
 * Note well:  This file is generated.  See the 'filenames =' assignment, below,
 * for more information.
 */

/*
 * The [prefix] macro is used by ./configure to define all the other
 * installation paths.
 *
 * If you need to change the prefix, it is best to re-run ./configure using the
 * --prefix=PATH option, as this will re-write all of the files which contain
 * the prefix, not just this one.
 */
prefix = @prefix@;
exec_prefix = @exec_prefix@;

/*
 * The [datadir] is where to put the data directories.
 *
 * The [datadir] is for architecture-neutral files.  On a network, this would be
 * shared between all machines on the network.  It can be mounted read-only.
 *
 * This is where shell scripts are parked.  This is where report scripts are
 * parked.  This is where documents are parked.
 *
 * By default, the macro uses the [prefix] macro to simplify the number of
 * things you have to supply on the ./configure command line.
 */
datadir = [DESTDIR]@datadir@;
datarootdir = [DESTDIR]@datarootdir@;

/*
 * The [sysconfdir] is where to put the system configuration directory.
 *
 *
 * By default, the macro uses the [prefix] macro to simplify the number of
 * things you have to supply on the ./configure command line.  It is common to
 * explicitly give ./configure --sysconfdir=/etc on the command line.
 */
sysconfdir = [DESTDIR]@sysconfdir@;

/*
 * This makefile builds the UCSD p-System system in three stages.
 *
 * The first stage is to use the ucsdpsys_compile command (from the
 * ucsd-psystem-xc project) to build the executables of the system, compiler,
 * assembler, linker and utilities.
 *
 * The first stage files are then combined, using the ucsdpsys_mkfs and
 * ucsdpsys_disk commands from the ucsd-psystem-fs project, to build disk images
 * suitable for use with a UCSD p-System emulator.
 *
 * Stage two involves using the ucsdpsys_vm emulator, from the ucsd-psystem-vm
 * project, to use the disk images created by stage one to compile the sources
 * once again, this time using the compiler built by stage one, in order to have
 * a natively compiled system.
 *
 * The second stage files are then combined, using the ucsdpsys_mkfs and
 * ucsdpsys_disk commands, to build a second set of disk images.  In theory the
 * system is now boot-strapped and ready to use.
 *
 * Stage three once again uses the emulator, but this time with the disk images
 * created by stage two.  The codefiles produced by stage three should be
 * identical to those produced by stage two.  If they differ, you have probably
 * uncovered a bug.
 */

all: stage1.disks;

/*
 * Only stage one is working, so far.
 */

/*
 * The host is the system (often a brand name) that will eventually host the
 * boot-strapped system.  This controls the choice of certain system
 * alternatives.  Look in the 'host' directory for the known host types (brand
 * names).  It also implies the kind of microprocessor being used.
 */
/*
 * The default is 'klebsch' in reference to the ucsd-psystem-vm project (the
 * emulator was written by Mario Klebsch).
 */
host = klebsch;

/*
 * The arch is the microprocessor that the boot-strapped system will eventually
 * execute on.  This controls the choice of interpreter, assembler and long
 * integer support to be built.
 *
 * Look in the 'arch' directory for the known microprocessor types.  We have yet
 * to locate all of the historical source code for all known architectures, so
 * the coverage may be uneven.  If you have source code to one of the missing
 * pieces, it would be a most welcome contribution to this project.
 */
arch = [collect ucsdpsys_osmakgen --arch-from-host [host]];

/*
 * The Cross Compiler Flags
 *
 * The -fno-efj-nfj option tells the cross compiler not to use the EFJ and NFJ
 * opcodes.  This is necessary for interpreters that do not implement these
 * opcodes; Apple, for example.
 *
 * The -finline-math option tells the cross compiler to use the CSP math
 * opcodes, rather than calling the TRANSCEN intrinsic unit.
 */
XCFLAGS = --arch\=[arch] -Wno-shadow;

/*
 * The Cross Assembler Flags
 */
XAFLAGS = --arch\=[arch];

/*
 * Note well: This file is generated.
 *
 * This variable holds the list of files from which this file was generated.  By
 * changeing it, and running the 'make rebuild-makefile' command, you can
 * manipulate it in various ways.
 *
 * 1. If you only need to rebuild the include dependencies, use the 'make
 * rebuild-makefile' command.
 * 2. If you need to add a source file, add it to the 'filenames' variable, and
 * then rebuild the Makefile (see above).
 * 3. If you want to add a new utility, the file must be named
 * <utility>/main.text (plus as many include files as you like in that
 * directory) for it to be recognised as a program to be compiled; then proceed
 * as if you were adding a new file or files (see above).
 * 4. If you need a more structural change to this file, you actually need to
 * change the ucsdpsys_osmakgen command in the cross compiler ucsd-psystem-xc
 * project.
 *
 * See the ucsdpsys_osmakgen(1) man page for more information about the
 * directory structure.
 */
filenames = arch/6502/example/main.asm.text example/main.text;

if [in [host] 6502] then
{

stage1/[host]/codefiles/example/main.asm.code: arch/6502/example/main.asm.text
{
    ucsdpsys_assemble [XAFLAGS] -Iarch/6502/example -J. -Jbl -Jblbl -Jblblbl -o
        stage1/[host]/codefiles/example/main.asm.code [resolve
        arch/6502/example/main.asm.text];
}
}

stage1/[host]/codefiles/example/main.pas.code: example/main.text
{
    ucsdpsys_compile [XCFLAGS] -J. -Jbl -Jblbl -Jblblbl -Iexample -o
        stage1/[host]/codefiles/example/main.pas.code [resolve
        example/main.text];
}

stage1/[host]/codefiles/example/main.code:
        stage1/[host]/codefiles/example/main.asm.code
        stage1/[host]/codefiles/example/main.pas.code
{
    ucsdpsys_link -o stage1/[host]/codefiles/example/main.code [resolve
        stage1/[host]/codefiles/example/main.pas.code] [resolve
        stage1/[host]/codefiles/example/main.asm.code];
}

stage1.disks: stage1/[host]/utility.vol;

stage2.disks: stage2/[host]/utility.vol;

stage3.disks: stage3/[host]/utility.vol;

stage1/[host]/utility/example.code: stage1/[host]/codefiles/example/main.code
{
    cp [resolve stage1/[host]/codefiles/example/main.code]
        stage1/[host]/utility/example.code;
}

/*
 * The Stage One Utility Disk image contains all of the programs that are part
 * of the UCSD p-System, but not essential to boot and run the system, and not
 * essential to build other programs and libraries.
 */
/*
 * The Stage One Utility Disk image is *not* used when compiling the next stage
 * of the build.
 */

stage1/[host]/utility.vol: stage1/[host]/utility/example.code
{
    ucsdpsys_mkfs --arch\=[arch] -B256 --label\=utility
        stage1/[host]/utility.vol;
    ucsdpsys_disk --file stage1/[host]/utility.vol --text --put [resolve
        stage1/[host]/utility/example.code];
    ucsdpsys_disk --file stage1/[host]/utility.vol --crunch --list --sort\=name;
}

stage2/[host]/utility/example.code: stage2/[host]/codefiles/example/main.code
{
    cp [resolve stage2/[host]/codefiles/example/main.code]
        stage2/[host]/utility/example.code;
}

/*
 * The Stage Two Utility Disk image contains all of the programs that are part
 * of the UCSD p-System, but not essential to boot and run the system, and not
 * essential to build other programs and libraries.
 */
/*
 * The Stage Two Utility Disk image is *not* used when compiling the next stage
 * of the build.
 */

stage2/[host]/utility.vol: stage2/[host]/utility/example.code
{
    ucsdpsys_mkfs --arch\=[arch] -B256 --label\=utility
        stage2/[host]/utility.vol;
    ucsdpsys_disk --file stage2/[host]/utility.vol --text --put [resolve
        stage2/[host]/utility/example.code];
    ucsdpsys_disk --file stage2/[host]/utility.vol --crunch --list --sort\=name;
}

stage3/[host]/utility/example.code: stage3/[host]/codefiles/example/main.code
{
    cp [resolve stage3/[host]/codefiles/example/main.code]
        stage3/[host]/utility/example.code;
}

/*
 * The Stage Three Utility Disk image contains all of the programs that are part
 * of the UCSD p-System, but not essential to boot and run the system, and not
 * essential to build other programs and libraries.
 */

stage3/[host]/utility.vol: stage3/[host]/utility/example.code
{
    ucsdpsys_mkfs --arch\=[arch] -B256 --label\=utility
        stage3/[host]/utility.vol;
    ucsdpsys_disk --file stage3/[host]/utility.vol --text --put [resolve
        stage3/[host]/utility/example.code];
    ucsdpsys_disk --file stage3/[host]/utility.vol --crunch --list --sort\=name;
}

clean: clean-files;
clean-files:
    set errok
{
    rm -f stage1/[host]/codefiles/example/main.asm.code;
    rm -f stage1/[host]/codefiles/example/main.code;
    rm -f stage1/[host]/codefiles/example/main.pas.code;
    rm -f stage1/[host]/utility.vol stage1/[host]/utility/example.code;
    rm -f stage2/[host]/utility.vol stage2/[host]/utility/example.code;
    rm -f stage3/[host]/utility.vol stage3/[host]/utility/example.code;
}

distclean: clean dist-clean-files dist-clean-dirs;
dist-clean-files:
    set errok
{
    rm -f config.log config.status;
}
dist-clean-dirs:
    set errok
{
    rm -rf stage1;
}

/*
 * Note well:  This file is generated.  This rule can be used to rebuild it.
 * See the 'filenames =' assignment, above, for more information.
 */

rebuild-makefile:
{
    ucsdpsys_osmakgen [filenames];
}

/*
 * We have "make install" install both the Stage One disk images and the Stage
 * One disk directories into [datadir].
 *
 * We install both the directories and the disk images so that the cross
 * compiler can read the [datadir]/ucsd-psystem-os/system/system.library file
 * when cross compiling programs that use units, without adding code to the
 * cross compiler for groping the private parts of disk images.  It also makes
 * it a simple task to remix the files when users want to make custom disk
 * images.
 */

install: stage1.install;

stage1.install: stage1.disks
{
    mkdir -p [datadir]/ucsd-psystem-os;
    cp -r stage1/[host]/diagnostic [datadir]/ucsd-psystem-os/diagnostic;
    cp [resolve stage1/[host]/diagnostic.vol]
        [datadir]/ucsd-psystem-os/diagnostic.vol;
    cp -r stage1/[host]/system [datadir]/ucsd-psystem-os/system;
    cp [resolve stage1/[host]/system.vol] [datadir]/ucsd-psystem-os/system.vol;
    cp -r stage1/[host]/utility [datadir]/ucsd-psystem-os/utility;
    cp [resolve stage1/[host]/utility.vol]
        [datadir]/ucsd-psystem-os/utility.vol;
}

stage2.install: stage2.disks
{
    mkdir -p [datadir]/ucsd-psystem-os;
    cp -r stage2/[host]/diagnostic [datadir]/ucsd-psystem-os/diagnostic;
    cp [resolve stage2/[host]/diagnostic.vol]
        [datadir]/ucsd-psystem-os/diagnostic.vol;
    cp -r stage2/[host]/system [datadir]/ucsd-psystem-os/system;
    cp [resolve stage2/[host]/system.vol] [datadir]/ucsd-psystem-os/system.vol;
    cp -r stage2/[host]/utility [datadir]/ucsd-psystem-os/utility;
    cp [resolve stage2/[host]/utility.vol]
        [datadir]/ucsd-psystem-os/utility.vol;
}

stage3.install: stage3.disks
{
    mkdir -p [datadir]/ucsd-psystem-os;
    cp -r stage3/[host]/diagnostic [datadir]/ucsd-psystem-os/diagnostic;
    cp [resolve stage3/[host]/diagnostic.vol]
        [datadir]/ucsd-psystem-os/diagnostic.vol;
    cp -r stage3/[host]/system [datadir]/ucsd-psystem-os/system;
    cp [resolve stage3/[host]/system.vol] [datadir]/ucsd-psystem-os/system.vol;
    cp -r stage3/[host]/utility [datadir]/ucsd-psystem-os/utility;
    cp [resolve stage3/[host]/utility.vol]
        [datadir]/ucsd-psystem-os/utility.vol;
}
fubar
test $? -eq 0 || no_result

mkdir -p example arch/6502/example
test $? -eq 0 || no_result

cat > example/main.text << 'fubar'
program example;

  procedure nothing;
  external;

begin
  nothing
end.
fubar
test $? -eq 0 || no_result

cat > arch/6502/example/main.asm.text << 'fubar'
    .proc nothing
    rts
    .end
fubar
test $? -eq 0 || no_result

ucsdpsys_osmakgen --output=test.cook \
        example/main.text arch/6502/example/main.asm.text
test $? -eq 0 || fail

diff ok test.cook
test $? -eq 0 || fail

#
# The functionality exercised by this test worked.
# No other assertions are made.
#
pass


/* vim: set ts=8 sw=4 et : */
